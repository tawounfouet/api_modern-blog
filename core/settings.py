"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import cloudinary

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-6dyg600)3^65dn&3ohn$ls&kzis-(^s*5%swdcgnxy90gy=+1h"
)

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv("DEBUG", "True").lower() == "true"
DEBUG = False

# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")


# Application definition

INSTALLED_APPS = [
    # Custom Admin Interface (must be before django.contrib.admin)
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # Third party apps
    "rest_framework",
    "rest_framework.authtoken",  # Required for dj-rest-auth
    "corsheaders",
    "django_filters",
    "cloudinary",
    "django_ckeditor_5",
    "rest_framework_simplejwt",
    "djoser",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.github",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # Celery apps
    "django_celery_results",  # For storing Celery task results in database
    "django_celery_beat",  # For periodic task scheduling
    # Local apps
    "content",
    "authentication",
    "helpers",  # Utility functions and system tasks
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Ajouter CORS middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Add allauth middleware
]

# # Configuration CORS pour le développement
# CORS_ALLOW_ALL_ORIGINS = os.getenv("DEBUG", "True").lower() == "true"

# # CORS allowed origins for production
# if not CORS_ALLOW_ALL_ORIGINS:
#     CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "").split(",")


# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = os.getenv("CORS_ALLOW_ALL_ORIGINS", "False") == "True"
CORS_ALLOW_CREDENTIALS = os.getenv("CORS_ALLOW_CREDENTIALS", "False") == "True"
CORS_EXPOSED_HEADERS = os.getenv("CORS_EXPOSED_HEADERS", "").split(",")
CORS_ALLOW_HEADERS = os.getenv("CORS_ALLOW_HEADERS", "").split(",")


# Configuration de DRF
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}

# Simple JWT Configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=int(os.getenv("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", "30"))
    ),
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=int(os.getenv("JWT_REFRESH_TOKEN_LIFETIME_DAYS", "1"))
    ),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# DJOSER Configuration
DJOSER = {
    "LOGIN_FIELD": "email",
    "USER_CREATE_PASSWORD_RETYPE": True,
    "USERNAME_CHANGED_EMAIL_CONFIRMATION": True,
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": True,
    "SEND_CONFIRMATION_EMAIL": True,
    "SET_USERNAME_RETYPE": True,
    "SET_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_URL": "password/reset/confirm/{uid}/{token}",
    "USERNAME_RESET_CONFIRM_URL": "email/reset/confirm/{uid}/{token}",
    "ACTIVATION_URL": "activate/{uid}/{token}",
    "SEND_ACTIVATION_EMAIL": True,
    "SERIALIZERS": {
        "user_create": "authentication.serializers.UserCreateSerializer",
        "user": "authentication.serializers.UserSerializer",
        "current_user": "authentication.serializers.UserSerializer",
        "user_delete": "djoser.serializers.UserDeleteSerializer",
    },
    "EMAIL": {
        "activation": "authentication.email.ActivationEmail",
        "confirmation": "authentication.email.ConfirmationEmail",
        "password_reset": "authentication.email.PasswordResetEmail",
        "password_changed_confirmation": "authentication.email.PasswordChangedConfirmationEmail",
        "username_changed_confirmation": "authentication.email.UsernameChangedConfirmationEmail",
        "username_reset": "authentication.email.UsernameResetEmail",
    },
    "TOKEN_MODEL": None,  # Nous utilisons JWT, donc pas besoin du modèle de token
}

# Email settings for development (using console backend)
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
# For production, configure with your email provider settings

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuration de la base de données avec détection automatique de l'environnement
DATABASE_URL = os.getenv("DATABASE_URL")

if DATABASE_URL and DATABASE_URL.startswith("postgresql://"):
    # Configuration PostgreSQL pour Docker ou production
    import dj_database_url

    DATABASES = {"default": dj_database_url.parse(DATABASE_URL)}
else:
    # Configuration SQLite pour le développement local
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# WhiteNoise configuration - using simple storage to avoid manifest issues
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"
WHITENOISE_MAX_AGE = 31536000  # 1 year in seconds


# Configuration des médias
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User model
AUTH_USER_MODEL = "authentication.User"

# Configuration Cloudinary
import cloudinary
import cloudinary.uploader
import cloudinary.api

# Variables de configuration pour le module helpers/_cloudinary
CLOUDINARY_CLOUD_NAME = os.getenv("CLOUDINARY_CLOUD_NAME")
CLOUDINARY_PUBLIC_API_KEY = os.getenv("CLOUDINARY_PUBLIC_API_KEY")
CLOUDINARY_SECRET_API_KEY = os.getenv("CLOUDINARY_SECRET_API_KEY")

# Configuration directe de Cloudinary
cloudinary.config(
    cloud_name=CLOUDINARY_CLOUD_NAME,
    api_key=CLOUDINARY_PUBLIC_API_KEY,
    api_secret=CLOUDINARY_SECRET_API_KEY,
    secure=True,
)

# Authentication settings
SITE_ID = int(os.getenv("SITE_ID", "1"))
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

# Django-allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = "mandatory" if not DEBUG else "none"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_MIN_LENGTH = 3
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False

# Configuration des champs d'inscription
ACCOUNT_SIGNUP_FIELDS = ["email", "username", "password1", "password2"]

# Configuration des méthodes de connexion
ACCOUNT_LOGIN_METHODS = ["email"]

# Configuration des limites de tentatives
ACCOUNT_RATE_LIMITS = {
    "login_failed": "5/5m",  # 5 tentatives par 5 minutes
}

# Configuration supplémentaire pour dj-rest-auth
REST_AUTH = {
    "USER_DETAILS_SERIALIZER": "authentication.serializers.UserSerializer",
    "REGISTER_SERIALIZER": "authentication.serializers.CustomRegisterSerializer",
    "PASSWORD_RESET_USE_SITES_DOMAIN": True,
    "OLD_PASSWORD_FIELD_ENABLED": True,
    # Configuration des classes de tokens
    "TOKEN_MODEL": None,  # Utilisation de JWT à la place
    "TOKEN_CREATOR": None,
    # Configuration des URLs
    "PASSWORD_RESET_CONFIRM_URL": "auth/password/reset/confirm/{uid}/{token}",
    "USERNAME_RESET_CONFIRM_URL": "auth/username/reset/confirm/{uid}/{token}",
    "ACTIVATION_URL": "auth/registration/verify-email/{key}",
    # Configuration des emails
    "EMAIL": {
        "confirmation": "authentication.email.ConfirmationEmail",
        "password_reset": "authentication.email.PasswordResetEmail",
        "password_changed": "authentication.email.PasswordChangedConfirmationEmail",
        "username_changed": "authentication.email.UsernameChangedConfirmationEmail",
        "username_reset": "authentication.email.UsernameResetEmail",
    },
    # Configuration des permissions et comportements
    "SESSION_LOGIN": False,  # Ne pas créer de session lors de la connexion
    "USE_JWT": True,  # Utiliser JWT pour l'authentification
    "JWT_AUTH_COOKIE": "auth",  # Nom du cookie pour le token JWT
    "JWT_AUTH_REFRESH_COOKIE": "refresh-token",  # Nom du cookie pour le refresh token
    "JWT_AUTH_SECURE": True,  # Cookies sécurisés en production
    "JWT_AUTH_HTTPONLY": True,  # Cookies HTTP-only
    "JWT_AUTH_SAMESITE": "Lax",  # Protection CSRF
    # Protection contre les attaques par force brute
    "FAILED_ATTEMPTS_TIMEOUT": 300,  # 5 minutes
    "MAX_FAILED_ATTEMPTS": 5,
}

# Social authentication settings - add your own client IDs and secrets for production
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.environ.get("GOOGLE_CLIENT_ID", ""),
            "secret": os.environ.get("GOOGLE_CLIENT_SECRET", ""),
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
    "github": {
        "APP": {
            "client_id": os.environ.get("GITHUB_CLIENT_ID", ""),
            "secret": os.environ.get("GITHUB_CLIENT_SECRET", ""),
        },
        "SCOPE": [
            "user",
            "user:email",
        ],
    },
}

# ============================================================================
# ADMIN INTERFACE CONFIGURATION
# ============================================================================

# Configuration de l'interface admin personnalisée
X_FRAME_OPTIONS = "SAMEORIGIN"
SILKY_PYTHON_PROFILER = True

# Configuration des thèmes et couleurs
ADMIN_INTERFACE = {
    # Titre de l'admin
    "TITLE": "Modern Blog Admin",
    "TITLE_COLOR": "#667eea",
    # Configuration du header
    "HEADER_COLOR": "#667eea",
    "HEADER_TITLE_COLOR": "#ffffff",
    "HEADER_LINK_COLOR": "#ffffff",
    "HEADER_LINK_HOVER_COLOR": "#e0e0e0",
    # Configuration du menu latéral
    "MENU_COLOR": "#2c3e50",
    "MENU_TITLE_COLOR": "#ffffff",
    "MENU_LINK_COLOR": "#ecf0f1",
    "MENU_LINK_HOVER_COLOR": "#3498db",
    "MENU_ICON_COLOR": "#bdc3c7",
    # Configuration générale
    "LOGO": "",  # Vous pouvez ajouter un logo ici
    "FAVICON": "",  # Vous pouvez ajouter un favicon ici
    "CSS": """
        /* Force l'affichage du logo */
        #site-name .logo {
            display: inline-block !important;
            max-height: 40px;
            max-width: 150px;
            margin-right: 10px;
            vertical-align: middle;
        }
        
        /* Améliore l'apparence du header avec le logo */
        #site-name a {
            display: flex;
            align-items: center;
            text-decoration: none;
        }
        
        /* Style pour le titre à côté du logo */
        #site-name span {
            font-size: 18px;
            font-weight: bold;
            margin-left: 8px;
        }
    """,  # CSS personnalisé pour forcer l'affichage du logo
    # Configuration des boutons
    "BUTTON_COLOR": "#667eea",
    "BUTTON_HOVER_COLOR": "#5a6fd8",
    # Configuration des formulaires
    "FORM_SUBMIT_ROW_COLOR": "#f8f9fa",
    "FORM_BUTTON_COLOR": "#667eea",
    "FORM_BUTTON_HOVER_COLOR": "#5a6fd8",
    # Configuration du pied de page
    "FOOTER_COLOR": "#34495e",
    "FOOTER_LINK_COLOR": "#ffffff",
    "FOOTER_LINK_HOVER_COLOR": "#3498db",
    # Configuration responsive
    "RESPONSIVE": True,
    # Configuration du changelist
    "LIST_FILTER_STICKY": True,
    "LIST_PER_PAGE": 25,
    # Configuration du thème sombre
    "THEME": "default",  # 'default', 'dark-green', 'blue', etc.
    # Personnalisation avancée
    "ENVIRONMENT": "Modern Blog Platform",
    "ENVIRONMENT_COLOR": "#28a745",
    "LANGUAGE_CHOOSER": False,
    "SHOW_RECENT_ACTIONS": True,
    "SHOW_RECENT_ACTIONS_MAX": 10,
}

# ============================================================================
# CELERY CONFIGURATION
# ============================================================================

# Celery Configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = "django-db"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Celery Task Settings
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# Celery Beat Settings
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Task Routing
CELERY_TASK_ROUTES = {
    "authentication.tasks.*": {"queue": "auth"},
    "content.tasks.*": {"queue": "content"},
    "helpers.tasks.*": {"queue": "helpers"},
}

# Worker Settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Task Settings
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_TASK_IGNORE_RESULT = False
CELERY_RESULT_EXTENDED = True
CELERY_RESULT_EXPIRES = 3600  # 1 hour

# Monitoring
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Retry Settings
CELERY_TASK_DEFAULT_RETRY_DELAY = 60
CELERY_TASK_MAX_RETRIES = 3

# Development Settings
if DEBUG:
    CELERY_TASK_ALWAYS_EAGER = False
    CELERY_TASK_EAGER_PROPAGATES = True

# ============================================================================
# FLOWER CONFIGURATION (Celery Monitoring)
# ============================================================================

# Flower settings for Celery monitoring
FLOWER_BASIC_AUTH = os.getenv("FLOWER_BASIC_AUTH", "admin:password")
FLOWER_PORT = int(os.getenv("FLOWER_PORT", "5555"))
FLOWER_URL_PREFIX = os.getenv("FLOWER_URL_PREFIX", "")

# ============================================================================
# LOGGING CONFIGURATION FOR CELERY
# ============================================================================

# Enhance logging to include Celery
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "logs/django.log",
            "formatter": "verbose",
        },
        "celery": {
            "class": "logging.FileHandler",
            "filename": "logs/celery.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "celery": {
            "handlers": ["console", "celery"],
            "level": "INFO",
            "propagate": False,
        },
        "celery.task": {
            "handlers": ["console", "celery"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# Create logs directory if it doesn't exist
import os

if not os.path.exists("logs"):
    os.makedirs("logs")

# ============================================================================
# CKEDITOR 5 CONFIGURATION
# ============================================================================

# CKEditor settings - inspiré du projet portfolio
customColorPalette = [
    {"color": "hsl(4, 90%, 58%)", "label": "Red"},
    {"color": "hsl(340, 82%, 52%)", "label": "Pink"},
    {"color": "hsl(291, 64%, 42%)", "label": "Purple"},
    {"color": "hsl(262, 52%, 47%)", "label": "Deep Purple"},
    {"color": "hsl(231, 48%, 48%)", "label": "Indigo"},
    {"color": "hsl(207, 90%, 54%)", "label": "Blue"},
]

CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": [
            "heading",
            "|",
            "bold",
            "italic",
            "link",
            "bulletedList",
            "numberedList",
            "blockQuote",
            "imageUpload",
        ],
    },
    "comment": {
        "language": {"ui": "en", "content": "en"},
        "toolbar": [
            "heading",
            "|",
            "bold",
            "italic",
            "link",
            "bulletedList",
            "numberedList",
            "blockQuote",
        ],
    },
    "extends": {
        "language": "en",
        "blockToolbar": [
            "paragraph",
            "heading1",
            "heading2",
            "heading3",
            "|",
            "bulletedList",
            "numberedList",
            "|",
            "blockQuote",
        ],
        "toolbar": [
            "heading",
            "codeBlock",
            "|",
            "outdent",
            "indent",
            "|",
            "bold",
            "italic",
            "link",
            "underline",
            "strikethrough",
            "code",
            "subscript",
            "superscript",
            "highlight",
            "|",
            "bulletedList",
            "numberedList",
            "todoList",
            "|",
            "blockQuote",
            "insertImage",
            "|",
            "fontSize",
            "fontFamily",
            "fontColor",
            "fontBackgroundColor",
            "mediaEmbed",
            "removeFormat",
            "insertTable",
            "sourceEditing",
        ],
        "image": {
            "toolbar": [
                "imageTextAlternative",
                "|",
                "imageStyle:alignLeft",
                "imageStyle:alignRight",
                "imageStyle:alignCenter",
                "imageStyle:side",
                "|",
                "toggleImageCaption",
                "|",
            ],
            "styles": [
                "full",
                "side",
                "alignLeft",
                "alignRight",
                "alignCenter",
            ],
        },
        "table": {
            "contentToolbar": [
                "tableColumn",
                "tableRow",
                "mergeTableCells",
                "tableProperties",
                "tableCellProperties",
            ],
            "tableProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
            "tableCellProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
        },
        "heading": {
            "options": [
                {
                    "model": "paragraph",
                    "title": "Paragraph",
                    "class": "ck-heading_paragraph",
                },
                {
                    "model": "heading1",
                    "view": "h1",
                    "title": "Heading 1",
                    "class": "ck-heading_heading1",
                },
                {
                    "model": "heading2",
                    "view": "h2",
                    "title": "Heading 2",
                    "class": "ck-heading_heading2",
                },
                {
                    "model": "heading3",
                    "view": "h3",
                    "title": "Heading 3",
                    "class": "ck-heading_heading3",
                },
            ]
        },
        "list": {
            "properties": {
                "styles": True,
                "startIndex": True,
                "reversed": True,
            }
        },
        "htmlSupport": {
            "allow": [
                {"name": "/.*/", "attributes": True, "classes": True, "styles": True}
            ]
        },
    },
}
